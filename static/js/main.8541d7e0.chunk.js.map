{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PlayerSection","i","raw","score","updateScore","scoreColor","className","value","onChange","e","target","autoFocus","type","App","useState","scores","changeScores","resultRegex","scorez","splice","calculatedScores","map","targetScore","match","reduce","memo","val","Number","key","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qLA6CA,SAASA,EAAT,GAAsD,IAA9BC,EAA6B,EAA7BA,EAAGC,EAA0B,EAA1BA,IAAKC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,YACjCC,EAAa,aAMjB,OALIF,EAAQ,EACVE,EAAa,iBACJF,EAAQ,IACjBE,EAAa,gBAGb,yBAAKC,UAAU,QACf,yBAAKA,UAAU,2DACf,2BAAOA,UAAU,sDAAjB,wBACcL,EAAE,IAEZ,2BAAOK,UAAU,wFACfC,MAAOL,EACPM,SAAU,SAASC,GAAIL,EAAYH,EAAGQ,EAAEC,OAAOH,QAC/CI,UAAe,IAAJV,EACXW,KAAK,WAEL,uBAAGN,UAAS,gDAA2CD,IAAeF,IAE3D,IAANF,GAAW,8BAMXY,MAtEf,WAAgB,IAAD,EACgBC,mBAAS,CAAC,GAAD,WADzB,mBACRC,EADQ,KACAC,EADA,KAEPC,EAAc,aAEpB,SAASb,EAAYH,EAAGC,GACtB,IAAIgB,EAAM,YAAOH,GACjBG,EAAOC,OAAOlB,EAAE,EAAEC,GAClBc,EAAaE,GAGf,IAAME,EAAmBL,EAAOM,KAAI,SAAAC,GAClC,OAAIA,EAAYC,MAAMN,GACfF,EAAOS,QAAO,SAACC,EAAMC,GAC1B,OAAIA,EAAIH,MAAMN,GACPQ,EAAOE,OAAOL,GAAeK,OAAOD,GAElCD,IAEP,GAEI,MAIV,OACE,yBAAKnB,UAAU,2BACb,wBAAIA,UAAU,qDAAd,wBACE,0BAAMA,UAAU,kFACbS,EAAOM,KAAI,SAACnB,EAAKD,GAAN,OAAY,kBAACD,EAAD,CACtBC,EAAGA,EACHC,IAAKA,EACLC,MAAOiB,EAAiBnB,GACxB2B,IAAK3B,EACLG,YAAaA,QAGjB,uBAAGE,UAAU,qCAAb,8BC1BYuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAST,MACvB,2DCZNU,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8541d7e0.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nfunction App() {\n  let [scores, changeScores] = useState([``, ``, ``, ``])\n  const resultRegex = /^-?[0-9]+$/\n\n  function updateScore(i, raw) {\n    let scorez = [...scores]\n    scorez.splice(i,1,raw)\n    changeScores(scorez)\n  }\n\n  const calculatedScores = scores.map(targetScore => {\n    if (targetScore.match(resultRegex)) {\n    return scores.reduce((memo, val) => {\n      if (val.match(resultRegex)) {\n      return memo + Number(targetScore) - Number(val)\n      } else {\n        return memo\n      }\n      },0)\n    } else {\n      return ``\n    }\n  })\n\n  return (\n    <div className=\"w-full max-w-sm mx-auto\">\n      <h1 className=\"mt-4 font-bold text-gray-900 text-4xl text-center\">Ulti Elszámoló</h1>\n        <form className=\"bg-gray-100 shadow-2xl rounded mx-2 px-1 pt-2 pb-2 mb-4 border border-gray-300\">\n          {scores.map((raw, i) => <PlayerSection\n            i={i}\n            raw={raw}\n            score={calculatedScores[i]}\n            key={i}\n            updateScore={updateScore}\n          />)}\n        </form>\n        <p className=\"text-gray-500 text-xs text-center\">\n          made with &lt;3 by erdostom\n        </p>\n      </div>\n  );\n}\n\nfunction PlayerSection({i, raw, score, updateScore}) {\n  let scoreColor = \"text-black\"\n  if (score > 0) {\n    scoreColor = \"text-green-700\"\n  } else if (score < 0) {\n    scoreColor = \"text-red-700\"\n  }\n  return (\n    <div className=\"mt-4\">\n    <div className=\"grid grid-cols-3 gap-4 mb-2 items-middle items-baseline\">\n    <label className=\"block text-gray-600 text-sm font-bold mb-2 text-xl\" >\n      {`Játékos ${i+1}`}\n      </label>\n        <input className=\"bg-gray-200 text-gray-700 rounded-full border-none text-right text-xl pr-3 self-start\"\n          value={raw}\n          onChange={function(e) {updateScore(i, e.target.value)}}\n          autoFocus={i===0}\n          type=\"number\"\n        />\n          <p className={`pr-2 text-right text-gray-800 text-xl ${scoreColor}`}>{score}</p>\n            </div>\n              {i !== 3 && <hr />}\n            </div>\n  )\n}\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}